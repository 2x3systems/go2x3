syntax = "proto3";
package graph;

//option go_package = "github.com/2x3systems/go2x3/lib2x3/graph";


message CatalogState {

    int32               MajorVers                   = 1;
    int32               MinorVers                   = 2;
    
    // TraceCount is the Traces len for this Catalog's Traces index.
    // This effectively sets a vertex size limit for Graphs this Catalog can process.
    // DefaultCatalogTraceCount specifies the default TraceCount for new catalogs. 
    int32               TraceCount                  = 10;
                
    // NumTraces[Nv] is the number of traces of in this catalog for a given number of vertices.
    // Note: NumTraces[0] is always 0 and len(NumTraces) == TraceCount+1
    repeated uint64     NumTraces                   = 11;
    
    // NumPrimes[Nv] is the number of particle primes for a given number of vertices.
    // Note: NumPrimes[0] is always 0 and len(NumPrimes) == TraceCount+1
    repeated uint64     NumPrimes                   = 12;
    
    // Set if this catalog is to auto-determine if a newly added Graph / Traces are primes.
    bool                IsPrimeCatalog              = 20;
}


// IsPrime specifies if a graph system has constituent factors or not.
// If a graph is prime, then it cannot be formed by combining any other particles.
enum IsPrime {
    IsPrime_Unspecified = 0;
    IsPrime_Yes         = 1;
    IsPrime_No          = 2;
}

// enum AttrName {
//     kAsciiID,
//     kUT8Name,
//     kTracesID,
//     kGraphID,
// }

// message GraphAttr {
//     uint64 AttrLabelID = 1;
//     string AttrLabel = 2;
//     bytes  Block = 3;
// }

// GraphDef is a particular vertex+edge assignment with bound names.
// Has similarities to a "Contributing structure" in quantum|chemistry lingo. https://en.wikipedia.org/wiki/Resonance_(chemistry)
message GraphDef {

    IsPrime             IsPrime                     = 1;
                
    // If non-zero, the Traces of this graph has a registered ID. 
    // These values can be used to lookup a graph's common ascii symbolic name, UTF8 symbolic name, or nickname
    uint64              TracesID                    = 2;
    uint64              GraphID                     = 3;
                
    // A specific vertex+edge assignment 
    bytes               GraphEncoding               = 8;
                
                    // Graph expr string that canonically express this graph and can therefore be used for easy graph equivalence testing.
    string              CanonicGraphExpr            = 9;
   
    // Any number of graph expr strings that reduce to the same equivalent (canonic) graph.
    // This list is stored and maintained in sorted UTF8 order for binary search.
    repeated string     GraphExprs                  = 12;
    
}


