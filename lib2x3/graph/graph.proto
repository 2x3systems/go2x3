syntax = "proto3";
package graph;

//option go_package = "github.com/fine-structures/sdk-go/lib2x3/graph";


message CatalogState {

    int32               MajorVers                   = 1;
    int32               MinorVers                   = 2;
    
    // TraceCount is the Traces len for this Catalog's Traces index.
    // This effectively sets a vertex size limit for Graphs this Catalog can process.
    // DefaultCatalogTraceCount specifies the default TraceCount for new catalogs. 
    int32               TraceCount                  = 10;
                
    // NumTraces[Nv] is the number of traces of in this catalog for a given number of vertices.
    // Note: NumTraces[0] is always 0 and len(NumTraces) == TraceCount+1
    repeated uint64     NumTraces                   = 11;
    
    // NumPrimes[Nv] is the number of particle primes for a given number of vertices.
    // Note: NumPrimes[0] is always 0 and len(NumPrimes) == TraceCount+1
    repeated uint64     NumPrimes                   = 12;
    
    // Set if this catalog is to auto-determine if a newly added Graph / Traces are primes.
    bool                IsPrimeCatalog              = 20;
}


// IsPrime specifies if a graph system has constituent factors or not.
// If a graph is prime, then it cannot be formed by combining any other particles.
enum IsPrime {
    IsPrime_Unspecified = 0;
    IsPrime_Yes         = 1;
    IsPrime_No          = 2;
}


// GraphDef is a particular vertex+edge assignment with bound names.
// Has similarities to a "Contributing structure" in quantum|chemistry lingo. https://en.wikipedia.org/wiki/Resonance_(chemistry)
message GraphDef {

    IsPrime             IsPrime                     = 1;
                
    // If non-zero, the Traces of this graph has a registered ID. 
    // These values can be used to lookup a graph's common ascii symbolic name, UTF8 symbolic name, or nickname
    uint64              TracesID                    = 2;
    uint64              GraphID                     = 3;
                
    // A specific vertex+edge assignment 
    bytes               GraphEncoding               = 8;
                
                    // Graph expr string that canonically express this graph and can therefore be used for easy graph equivalence testing.
    string              CanonicGraphExpr            = 9;
   
    // Any number of graph expr strings that reduce to the same equivalent (canonic) graph.
    // This list is stored and maintained in sorted UTF8 order for binary search.
    repeated string     GraphExprs                  = 12;
    
}

// GroupID is a vertex group ID containing one or more Vtx.
enum GroupID {
    GroupID_void      = 0;
    GroupID_LoopVtx   = 1; // Group self-edge having cycle length 1 
    GroupID_LoopGroup = 2; // Group self-edge having cycle length 2
    GroupID_G1        = 3; // Ordinal of first vertex group
}

// GraphStatus describes the state of a 2x3 graph.
enum GraphStatus {
    
    // The graph is an in unassigned or otherwise invalid state
    GraphStatus_Invalid = 0;
     
    // All Vtx have been validated as expressing a valid and complete graph.
    // VtxID, E_FromVtx. E_Sign have been assigned.
    // Each Vtx is in its own separate group and has exactly 3 VtxEdges.
    GraphStatus_Validated = 2;
    
    // First, edges are sorted by DstVtxID then SrcVtxID.
    // Next, edges that have matching DstVtxID and SrcVtxID are combined (summed).
    GraphStatus_Normalized  = 4;
    
    // A cycle spectrum is performed on the graph to canonically order vtx groups.
    // Vtx determined to be in the same group are merged into a single vtx group.
    // Finally, all edges are normalized. 
    GraphStatus_Canonized = 6;
}


enum OddSign {
    OddSign_Natural = 0; // Odd cycles are not inverted 
    OddSign_Zero    = 1; // Odd cycles are zero
    OddSign_Invert  = 2; // Odd cycles are inverted
}

// VtxEdge
message VtxEdge {
    
    // Initially assigned label: 1, 2, 3,..  (a one-based index ID)
    uint32              DstVtxID = 2;
    
    // Specifies the remote vertex of this edge (a one-based vtx index ID)
    uint32              SrcVtxID = 3;
    
    // Count is the instance count (coefficient) of Cycles.
    int64               Count = 6;
    

    
}


// VtxGroup represents one or more 2x3 vertices that have the same cycle traces.
message VtxGroup {

    // Group ID assignment of home Vtx based on canonic cycle vector comparison ordering.
    // 0 denotes unassigned; first valid GroupID is 1.
    uint32              GroupID                     = 2;

    // GraphID is one-based index of the graph this VtxGroup belongs to.
    // In order for two VtxGroups to operate / consolidate they must reside in the same graph (particle).
    uint32              GraphID                     = 3; 
     
    // Count is the instance count (coefficient) of Cycles.
    int64               Count                       = 5;
    
    // If set, the sign of each odd cycle traces is inverted in Cycles[].
    OddSign             OddSign                     = 8;
    
    // When assigned from a 2x3 graph, each Vtx has 3 edges. 
    // After canonization, the edges of vertices having the same Cycles are consolidated into corresponding groups.
    repeated VtxEdge    Edges                       = 15;
    
    // Contribution to Traces == Count * OddSign( Cycles[] )
    repeated int64      Cycles                      = 16;
    
    
    //int64               MetricNumerator   = 8; // numerator of the metric
    //int64               MetricDenominator = 9; // numerator of the metric

}



message Tag {
    string              Label                      = 1;
    string              TagURI                     = 2;
    string              Expr                       = 3;
}

message VtxGraph {
    GraphStatus            Status                  = 1;
    repeated Tag           Tags                    = 2;
    repeated VtxGroup      Vtx                     = 3;
}


