syntax = "proto3";
package graph;

//option go_package = "github.com/2x3systems/go2x3/lib2x3/graph";


message CatalogState {

    int32               MajorVers                   = 1;
    int32               MinorVers                   = 2;
    
    // TraceCount is the Traces len for this Catalog's Traces index.
    // This effectively sets a vertex size limit for Graphs this Catalog can process.
    // DefaultCatalogTraceCount specifies the default TraceCount for new catalogs. 
    int32               TraceCount                  = 10;
                
    // NumTraces[Nv] is the number of traces of in this catalog for a given number of vertices.
    // Note: NumTraces[0] is always 0 and len(NumTraces) == TraceCount+1
    repeated uint64     NumTraces                   = 11;
    
    // NumPrimes[Nv] is the number of particle primes for a given number of vertices.
    // Note: NumPrimes[0] is always 0 and len(NumPrimes) == TraceCount+1
    repeated uint64     NumPrimes                   = 12;
    
    // Set if this catalog is to auto-determine if a newly added Graph / Traces are primes.
    bool                IsPrimeCatalog              = 20;
}


// IsPrime specifies if a graph system has constituent factors or not.
// If a graph is prime, then it cannot be formed by combining any other particles.
enum IsPrime {
    IsPrime_Unspecified = 0;
    IsPrime_Yes         = 1;
    IsPrime_No          = 2;
}


// GraphDef is a particular vertex+edge assignment with bound names.
// Has similarities to a "Contributing structure" in quantum|chemistry lingo. https://en.wikipedia.org/wiki/Resonance_(chemistry)
message GraphDef {

    IsPrime             IsPrime                     = 1;
                
    // If non-zero, the Traces of this graph has a registered ID. 
    // These values can be used to lookup a graph's common ascii symbolic name, UTF8 symbolic name, or nickname
    uint64              TracesID                    = 2;
    uint64              GraphID                     = 3;
                
    // A specific vertex+edge assignment 
    bytes               GraphEncoding               = 8;
                
                    // Graph expr string that canonically express this graph and can therefore be used for easy graph equivalence testing.
    string              CanonicGraphExpr            = 9;
   
    // Any number of graph expr strings that reduce to the same equivalent (canonic) graph.
    // This list is stored and maintained in sorted UTF8 order for binary search.
    repeated string     GraphExprs                  = 12;
    
}

// GroupID is a vertex group ID containing one or more Vtx.
enum GroupID {
    GroupID_void      = 0;
    GroupID_LoopVtx   = 1; // Group self-edge having cycle length 1 
    GroupID_LoopGroup = 2; // Group self-edge having cycle length 2
    GroupID_G1        = 3; // Ordinal of first vertex group
}

// VtxStatus specifies the current state of Vtx that comprise a 2x3 graph.
enum VtxStatus {
    
    // The graph is an in unassigned or otherwise invalid state
    VtxStatus_Invalid = 0;
     
    // All Vtx have been validated as expressing a valid and complete graph.
    // VtxID, E_FromVtx. E_Sign have been assigned.
    // Each Vtx is in its own separate group and has exactly 3 VtxEdges.
    VtxStatus_Validated = 2;
    
    // GroupOrd and GroupT0 have been determined via canonic vertex comparison.
    // Vtx with the same cycle vector will be assigned the same GroupID.
    VtxStatus_Canonized  = 4;
    
    // E_FromVtx and E_Sign values have been normalized and have been canonically ordered.
    // VtxIDs have been normalized.
    //
    // Each VtxEdge with the same "home" GroupID are combined into a single (group) Vtx
    // and edges are canonically consolidated and reordered. 
    VtxStatus_Canonized_Normalized = 6;
}


message VtxEdge {

    // Initially assigned label: 1, 2, 3, ..  (a one-based index ID)
    uint32              HomeVtxID                   = 1;
    
    // Specifies the remote vertex of this edge (a one-based vtx index ID)
    uint32              FromVtxID                   = 2;
  
    int32               EdgeSign                    = 4;
    int32               EdgeSign_Raw                = 7;

    // Note that if Sign has been normalized to 0, then FromGroup is also normalized to nil.
    // Sort edges by normalized values first, then by raw / unnormalized values
    GroupID             FromGroup                   = 3;
    GroupID             FromGroup_Raw               = 6;
    
}


// Vtx generally isn't used for Graph serialization but is used to model runtime processing and state 
message Vtx {

    // Initially assigned label: 1, 2, 3, ..  (a one-based index ID)
    uint32              VtxID                       = 2;
    
    // When assigned from a 2x3 graph, each Vtx has 3 edges but after canonicalization,
    // edges are pooled together into their respective grouops.
    repeated VtxEdge    Edges                       = 4;

    // Group ID assignment of home Vtx based on canonic cycle vector comparison ordering.
    // Init to 0 to denote unknown; the first valid GroupID for a Vtx starts at GroupID_G1.
    GroupID             GroupID                     = 6;
    
    // Traces sum of path length 1 (net sum of vtx loop signs in group)
    int32               GroupT0                     = 7;
    
    repeated int64      Cycles                      = 10;
    repeated int64      Ci0                         = 11;
    repeated int64      Ci1                         = 12;
    
}



message VtxGraph {
    VtxStatus           Status                      = 1;


    repeated Vtx        Vtx                         = 2;
}